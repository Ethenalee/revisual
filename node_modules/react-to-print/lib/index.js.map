{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nclass ReactToPrint extends React.Component {\n  static propTypes = {\n    /** Copy styles over into print window. default: true */\n    copyStyles: PropTypes.bool,\n    /** Trigger action used to open browser print */\n    trigger: PropTypes.func.isRequired,\n    /** Content to be printed */\n    content: PropTypes.func.isRequired,\n    /** Callback function to trigger before print */\n    onBeforePrint: PropTypes.func,\n    /** Callback function to trigger after print */\n    onAfterPrint: PropTypes.func,\n    /** Override default print window styling */\n    pageStyle: PropTypes.string,\n    /** Optional class to pass to the print window body */\n    bodyClass: PropTypes.string,\n  };\n\n  static defaultProps = {\n    bodyClass: '',\n    copyStyles: true,\n    onAfterPrint: undefined,\n    onBeforePrint: undefined,\n    pageStyle: undefined,\n  };\n\n  removeWindow = (target) => {\n    setTimeout(() => {\n      target.parentNode.removeChild(target);\n    }, 500);\n  }\n\n  triggerPrint = (target) => {\n    const { onBeforePrint, onAfterPrint } = this.props;\n\n    if (onBeforePrint) {\n      onBeforePrint();\n    }\n\n    setTimeout(() => {\n      target.contentWindow.focus();\n      target.contentWindow.print();\n      this.removeWindow(target);\n\n      if (onAfterPrint) {\n        onAfterPrint();\n      }\n    }, 500);\n  }\n\n  handlePrint = () => {\n    const {\n      bodyClass,\n      content,\n      copyStyles,\n      pageStyle,\n    } = this.props;\n\n    const contentEl = content();\n\n    if (contentEl === undefined) {\n      console.error(\"Refs are not available for stateless components. For 'react-to-print' to work only Class based components can be printed\"); // eslint-disable-line no-console\n      return;\n    }\n\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n\n    const contentNodes = findDOMNode(contentEl);\n    const linkNodes = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    this.linkTotal = linkNodes.length || 0;\n    this.linksLoaded = [];\n    this.linksErrored = [];\n\n    const markLoaded = (linkNode, loaded) => {\n      if (loaded) {\n        this.linksLoaded.push(linkNode);\n      } else {\n        console.error(\"'react-to-print' was unable to load a link. It may be invalid. 'react-to-print' will continue attempting to print the page. The link the errored was:\", linkNode); // eslint-disable-line no-console\n        this.linksErrored.push(linkNode);\n      }\n\n      // We may have errors, but attempt to print anyways - maybe they are trivial and the user will\n      // be ok ignoring them\n      if (this.linksLoaded.length + this.linksErrored.length === this.linkTotal) {\n        this.triggerPrint(printWindow);\n      }\n    };\n\n    printWindow.onload = () => {\n      /* IE11 support */\n      if (window.navigator && window.navigator.userAgent.indexOf('Trident/7.0') > -1) {\n        printWindow.onload = null;\n      }\n\n      const domDoc = printWindow.contentDocument || printWindow.contentWindow.document;\n      const srcCanvasEls = [...contentNodes.querySelectorAll('canvas')];\n\n      domDoc.open();\n      domDoc.write(contentNodes.outerHTML);\n      domDoc.close();\n\n      /* remove date/time from top */\n      const defaultPageStyle = pageStyle === undefined\n        ? '@page { size: auto;  margin: 0mm; } @media print { body { -webkit-print-color-adjust: exact; } }'\n        : pageStyle;\n\n      const styleEl = domDoc.createElement('style');\n      styleEl.appendChild(domDoc.createTextNode(defaultPageStyle));\n      domDoc.head.appendChild(styleEl);\n\n      if (bodyClass.length) {\n        domDoc.body.classList.add(bodyClass);\n      }\n\n      const canvasEls = domDoc.querySelectorAll('canvas');\n      [...canvasEls].forEach((node, index) => {\n        node.getContext('2d').drawImage(srcCanvasEls[index], 0, 0);\n      });\n\n      if (copyStyles !== false) {\n        const headEls = document.querySelectorAll('style, link[rel=\"stylesheet\"]');\n\n        [...headEls].forEach((node, index) => {\n          if (node.tagName === 'STYLE') {\n            const newHeadEl = domDoc.createElement(node.tagName);\n\n            if (node.sheet) {\n              let styleCSS = '';\n\n              for (let i = 0; i < node.sheet.cssRules.length; i++) {\n                styleCSS += `${node.sheet.cssRules[i].cssText}\\r\\n`;\n              }\n\n              newHeadEl.setAttribute('id', `react-to-print-${index}`);\n              newHeadEl.appendChild(domDoc.createTextNode(styleCSS));\n              domDoc.head.appendChild(newHeadEl);\n            }\n          } else {\n            const attributes = [...node.attributes];\n\n            const hrefAttr = attributes.filter(attr => attr.nodeName === 'href');\n            const hasHref = hrefAttr.length ? !!hrefAttr[0].nodeValue : false;\n\n            // Many browsers will do all sorts of weird things if they encounter an empty `href`\n            // tag (which is invalid HTML). Some will attempt to load the current page. Some will\n            // attempt to load the page's parent directory. These problems can cause\n            // `react-to-print` to stop  without any error being thrown. To avoid such problems we\n            // simply do not attempt to load these links.\n            if (hasHref) {\n              const newHeadEl = domDoc.createElement(node.tagName);\n\n              attributes.forEach((attr) => {\n                newHeadEl.setAttribute(attr.nodeName, attr.nodeValue);\n              });\n\n              newHeadEl.onload = markLoaded.bind(null, newHeadEl, true);\n              newHeadEl.onerror = markLoaded.bind(null, newHeadEl, false);\n              domDoc.head.appendChild(newHeadEl);\n            } else {\n              console.warn(\"'react-to-print' encountered a <link> tag with an empty 'href' attribute. In addition to being invalid HTML, this can cause problems in many browsers, and so the <link> was not loaded. The <link> is:\", node); // eslint-disable-line no-console\n              markLoaded(node, true); // `true` because we've already shown a warning for this\n            }\n          }\n        });\n      }\n\n      if (this.linkTotal === 0 || copyStyles === false) {\n        this.triggerPrint(printWindow);\n      }\n    };\n\n    document.body.appendChild(printWindow);\n  }\n\n  setRef = (ref) => {\n    this.triggerRef = ref;\n  }\n\n  render() {\n    const {\n      trigger,\n    } = this.props;\n\n    return React.cloneElement(trigger(), {\n      onClick: this.handlePrint,\n      ref: this.setRef,\n    });\n  }\n}\n\nexport default ReactToPrint;\n"],"names":["ReactToPrint","target","setTimeout","parentNode","removeChild","_this","props","onBeforePrint","onAfterPrint","contentWindow","focus","print","removeWindow","bodyClass","content","copyStyles","pageStyle","contentEl","undefined","printWindow","document","createElement","style","position","top","left","contentNodes","findDOMNode","linkNodes","querySelectorAll","linkTotal","length","linksLoaded","linksErrored","markLoaded","linkNode","loaded","push","console","error","triggerPrint","onload","window","navigator","userAgent","indexOf","domDoc","contentDocument","srcCanvasEls","open","write","outerHTML","close","defaultPageStyle","styleEl","appendChild","createTextNode","head","body","classList","add","forEach","node","index","getContext","drawImage","tagName","newHeadEl","sheet","styleCSS","i","cssRules","cssText","setAttribute","attributes","hrefAttr","filter","attr","nodeName","nodeValue","bind","onerror","warn","ref","triggerRef","React","Component","trigger","this","cloneElement","onClick","handlePrint","setRef"],"mappings":"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"}